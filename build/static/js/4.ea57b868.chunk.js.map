{"version":3,"sources":["components/modules/ClusterViewer/items/GeneralCluster.js"],"names":["initialState","dataReady","clusters","GeneralCluser","state","createDataPoints","plotTraces","_","groupBy","_this","props","modulesData","cells","Object","keys","forEach","key","name","trace","x","map","y","mode","type","text","hovertemplate","concat","opacity","push","renderGenePlot","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Fragment","react_plotly_js__WEBPACK_IMPORTED_MODULE_8___default","className","data","layout","height","hovermode","yaxis","title","showgrid","zeroline","xaxis","nextProps","nextState","nextContext","this","isEmpty","setState","mapValues","keyBy","values","collection","length","_hooks_pageLoader__WEBPACK_IMPORTED_MODULE_10__","frame","semantic_ui_react__WEBPACK_IMPORTED_MODULE_6__","Row","Column","width","semantic_ui_react__WEBPACK_IMPORTED_MODULE_7__","Component"],"mappings":"2NAMMA,EAAe,CAACC,WAAW,EAAOC,SAAU,IAE5CC,6MAEFC,MAAQJ,IAMRK,iBAAmB,WACf,IAAMC,EAAa,GACbJ,EAAWK,IAAEC,QAAQC,EAAKC,MAAMC,YAAYC,MAAO,cAezD,OAdAC,OAAOC,KAAKZ,GAAUa,QAAQ,SAACC,GAC3B,IAAMC,EAAMR,EAAKL,MAAMF,SAASc,GAC1BE,EAAQ,CACVC,EAAGZ,IAAEa,IAAIlB,EAASc,GAAM,UACxBK,EAAGd,IAAEa,IAAIlB,EAASc,GAAM,UACxBM,KAAM,UACNC,KAAM,YACNN,KAAMA,EACNO,KAAMjB,IAAEa,IAAIlB,EAASc,GAAM,cAC3BS,cAAa,kCAAAC,OAAoCT,EAApC,wBACbU,QAAS,IAEbrB,EAAWsB,KAAKV,KAEbZ,KAEXuB,eAAiB,WACb,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACII,UAAW,kBACXC,KAAM3B,EAAKJ,mBACXgC,OAAQ,CACJC,OAAQ,IACRC,UAAW,UACXC,MAAO,CACHC,MAAO,OACPC,UAAU,EACVC,UAAU,GAEdC,MAAO,CACHH,MAAO,OACPC,UAAU,EACVC,UAAU,6FAxCZE,EAAWC,EAAWC,GACxC,OAASC,KAAK5C,MAAMH,WAAa6C,EAAU7C,sDA+CvCM,IAAE0C,QAAQD,KAAK5C,MAAMF,WACrB8C,KAAKE,SAAS,CACVhD,SACIK,IAAE4C,UAAU5C,IAAE6C,MAAM7C,IAAE8C,OAAOL,KAAKtC,MAAM4C,YAAa,cAAe,iDAKhF,OAAIN,KAAKtC,MAAMC,YAAYC,MAAM2C,OAAS,EAAUzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAYC,OAAO,KAClET,KAAK5C,MAAMH,WAAW+C,KAAKE,SAAS,CAACjD,WAAW,IAEjD6B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAC0B,EAAA,EAAKC,IAAN,KACI7B,EAAAC,EAAAC,cAAC0B,EAAA,EAAKE,OAAN,CAAaC,MAAO,IAChB/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACKd,KAAKnB,6BAnENkC,aA4Eb5D","file":"static/js/4.ea57b868.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport {Grid, Segment,} from 'semantic-ui-react'\nimport Plot from 'react-plotly.js';\nimport _ from 'lodash'\nimport PageLoader from \"../../../hooks/pageLoader\";\n\nconst initialState = {dataReady: false, clusters: {}}\n\nclass GeneralCluser extends Component {\n\n    state = initialState;\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return (!this.state.dataReady && nextState.dataReady)\n    }\n\n    createDataPoints = () => {\n        const plotTraces = [];\n        const clusters = _.groupBy(this.props.modulesData.cells, 'cluster_id')\n        Object.keys(clusters).forEach((key) => {\n            const name =this.state.clusters[key]\n            const trace = {\n                x: _.map(clusters[key], 'tsne_1'),\n                y: _.map(clusters[key], 'tsne_2'),\n                mode: 'markers',\n                type: 'scattergl',\n                name: name,\n                text: _.map(clusters[key], 'cluster_id'),\n                hovertemplate: `<b>Cluster %{text}, Cell type: ${name}</b> <extra></extra>`,\n                opacity: 0.5,\n            };\n            plotTraces.push(trace)\n        });\n        return plotTraces\n    }\n    renderGenePlot = () => {\n        return (\n            <>\n                <Plot\n                    className={'full-size large'}\n                    data={this.createDataPoints()}\n                    layout={{\n                        height: 600,\n                        hovermode: 'closest',\n                        yaxis: {\n                            title: \"test\",\n                            showgrid: false,\n                            zeroline: false,\n                        },\n                        xaxis: {\n                            title: \"test\",\n                            showgrid: false,\n                            zeroline: false,\n                        }\n                    }}\n                />\n            </>\n        )\n    }\n    componentDidMount() {\n        if (_.isEmpty(this.state.clusters)){\n            this.setState({\n                clusters:\n                    _.mapValues(_.keyBy(_.values(this.props.collection), 'cluster_id'), 'annotation')\n            })\n        }\n    }\n    render() {\n        if (this.props.modulesData.cells.length < 1) return <PageLoader frame={true} />\n        if (!this.state.dataReady) this.setState({dataReady: true})\n        return (\n            <>\n                <Grid.Row>\n                    <Grid.Column width={16}>\n                        <Segment>\n                            {this.renderGenePlot()}\n                        </Segment>\n                    </Grid.Column>\n                </Grid.Row>\n            </>\n        )\n    }\n}\n\nexport default GeneralCluser\n"],"sourceRoot":""}