{"version":3,"sources":["../node_modules/semantic-ui-react/dist/es/modules/Tab/TabPane.js","../node_modules/semantic-ui-react/dist/es/modules/Tab/Tab.js","components/modules/ClusterViewer/items/GeneExpressionTab.js"],"names":["TabPane","props","active","children","className","content","loading","classes","classnames_default","Object","classNameBuilders","rest","getUnhandledProps","ElementType","getElementType","calculatedDefaultProps","Segment","attached","react_default","a","createElement","extends_default","lib","isNil","handledProps","defaultProps","as","propTypes","create","factories","Tab_TabPane","Tab_Tab","_Component","Tab","_getPrototypeOf2","_this","classCallCheck_default","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn_default","getPrototypeOf_default","call","apply","concat","defineProperty_default","assertThisInitialized_default","e","_ref","index","invoke_default","objectSpread_default","activeIndex","trySetState","inherits_default","createClass_default","key","value","_this$props","panes","renderActiveOnly","state","get_default","map_default","_ref2","pane","overrideProps","_this$props2","menu","menuPosition","tabular","Menu","autoGenerateKey","items","onItemClick","handleItemClick","_this$props3","grid","paneWidth","tabWidth","gridProps","objectWithoutProperties_default","position","Grid","GridColumn","width","renderItems","stretched","renderMenu","vertical","renderVertical","AutoControlledComponent","modules_Tab_Tab","initialState","activeGene","clusters","GeneExpressionForm","renderPlotHeader","plotType","extra","undefined","modulesData","Header","icon","textAlign","Content","renderViolinPlot","Fragment","react_plotly_default","data","createViolinDataPoints","layout","height","hovermode","yaxis","range","zeroline","xaxis","showline","cellsByGene","cells","colors","plotTraces","_","groupBy","keys","forEach","trace","y","map","name","type","opacity","meanline","visible","box","boxpoints","line","color","showlegend","fillcolor","push","createGeneDataPoints","item","cluster_id","x","text","customdata","mode","marker","colorbar","title","thicknessmode","lenmode","len","thickness","hovertemplate","renderGenePlot","selected","isEmpty","PageLoader","showgrid","menuItem","render","Pane","nextProps","nextState","nextContext","setState","mapValues","keyBy","values","collection","Row","centered","Column","secondary","pointing","Component"],"mappings":"2eAUA,SAAAA,EAAAC,GACA,IAAAC,EAAAD,EAAAC,OACAC,EAAAF,EAAAE,SACAC,EAAAH,EAAAG,UACAC,EAAAJ,EAAAI,QACAC,EAAAL,EAAAK,QACAC,EAAgBC,IAAGC,OAAAC,EAAA,EAAAD,CAAUP,EAAA,UAAoBO,OAAAC,EAAA,EAAAD,CAAUH,EAAA,iBAAAF,GAC3DO,EAAaF,OAAAG,EAAA,EAAAH,CAAiBT,EAAAC,GAC9BY,EAAoBJ,OAAAK,EAAA,EAAAL,CAAcT,EAAAC,GAClCc,EAAA,GAMA,OAJAF,IAAsBG,EAAA,IACtBD,EAAAE,SAAA,UAGSC,EAAAC,EAAKC,cAAAP,EAA4BQ,IAAQ,GAAGN,EAAAJ,EAAA,CACrDP,UAAAG,IACMe,EAAA,EAAaC,MAAApB,GAAAE,EAAAF,GAGnBH,EAAAwB,aAAA,2DACAxB,EAAAyB,aAAA,CACAC,GAAMV,EAAA,EACNd,QAAA,GAEAF,EAAA2B,UAkBC,GACD3B,EAAA4B,OAAiBnB,OAAAoB,EAAA,EAAApB,CAAsBT,EAAA,SAAAK,GACvC,OACAA,aAGe,IAAAyB,EAAA,EClCXC,EAEJ,SAAAC,GAGA,SAAAC,IACA,IAAAC,EAEAC,EAEIC,IAAeC,KAAAJ,GAEnB,QAAAK,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAuEA,EAAAL,EAAaK,IACpFF,EAAAE,GAAAJ,UAAAI,GAiBA,OAdAR,EAAYS,IAA0BP,MAAAH,EAA2BW,IAAeZ,IAAAa,KAAAC,MAAAb,EAAA,CAAAG,MAAAW,OAAAP,KAE5EQ,IAAgBC,IAAuBA,IAAsBf,IAAA,2BAAAgB,EAAAC,GACjE,IAAAC,EAAAD,EAAAC,MAEMC,IAAOnB,EAAAlC,MAAA,cAAAkD,EAAgCI,IAAa,GAAGpB,EAAAlC,MAAA,CAC7DuD,YAAAH,KAGAlB,EAAAsB,YAAA,CACAD,YAAAH,MAIAlB,EA8FA,OAzHEuB,IAASzB,EAAAD,GA8BT2B,IAAY1B,EAAA,EACd2B,IAAA,gCACAC,MAAA,WACA,OACAL,YAAA,KAGG,CACHI,IAAA,cACAC,MAAA,WACA,IAAAC,EAAAzB,KAAApC,MACA8D,EAAAD,EAAAC,MACAC,EAAAF,EAAAE,iBACAR,EAAAnB,KAAA4B,MAAAT,YACA,OAAAQ,EAAmCV,IAAQY,IAAIH,EAAA,IAAAf,OAAAQ,EAAA,eAAAnB,KAAApC,OAClCkE,IAAIJ,EAAA,SAAAK,EAAAf,GACjB,IAAAgB,EAAAD,EAAAC,KACA,OAAevC,EAAOF,OAAAyC,EAAA,CACtBC,cAAA,CACApE,OAAAmD,IAAAG,SAKG,CACHI,IAAA,aACAC,MAAA,WACA,IAAAU,EAAAlC,KAAApC,MACAuE,EAAAD,EAAAC,KACAT,EAAAQ,EAAAR,MACAU,EAAAF,EAAAE,aACAjB,EAAAnB,KAAA4B,MAAAT,YAMA,OAJA,IAAAgB,EAAAE,SAAA,UAAAD,IACAD,EAAAE,QAAA,SAGaC,EAAA,EAAI/C,OAAA4C,EAAA,CACjBI,iBAAA,EACAN,cAAA,CACAO,MAAiBV,IAAIJ,EAAA,YACrBe,YAAAzC,KAAA0C,gBACAvB,mBAIG,CACHI,IAAA,iBACAC,MAAA,SAAAW,GACA,IAAAQ,EAAA3C,KAAApC,MACAgF,EAAAD,EAAAC,KACAR,EAAAO,EAAAP,aAEAS,EAAAD,EAAAC,UACAC,EAAAF,EAAAE,SACAC,EAAsBC,IAAwBJ,EAAA,0BAE9CK,EAAAb,GAAA,UAAAD,EAAAvE,MAAAyE,SAAA,gBACA,OAAaxD,EAAAC,EAAKC,cAAemE,EAAA,EAAIH,EAAA,SAAAE,GAAoCE,EAAA,EAAU5D,OAAA,CACnF6D,MAAAN,EACAhF,SAAAqE,GACO,CACPI,iBAAA,IACUY,EAAA,EAAU5D,OAAA,CACpB6D,MAAAP,EACA/E,SAAAkC,KAAAqD,cACAC,WAAA,GACO,CACPf,iBAAA,IACO,UAAAU,GAA2BE,EAAA,EAAU5D,OAAA,CAC5C6D,MAAAN,EACAhF,SAAAqE,GACO,CACPI,iBAAA,OAGG,CACHhB,IAAA,SACAC,MAAA,WACA,IAAAW,EAAAnC,KAAAuD,aACAjF,EAAiBF,OAAAG,EAAA,EAAAH,CAAiBwB,EAAAI,KAAApC,OAClCY,EAAwBJ,OAAAK,EAAA,EAAAL,CAAcwB,EAAAI,KAAApC,OAEtC,OAAAuE,EAAAvE,MAAA4F,SACe3E,EAAAC,EAAKC,cAAAP,EAAAF,EAAA0B,KAAAyD,eAAAtB,IAGPtD,EAAAC,EAAKC,cAAAP,EAAAF,EAAA,WAAA6D,EAAAvE,MAAAgB,UAAAuD,EAAAnC,KAAAqD,cAAA,WAAAlB,EAAAvE,MAAAgB,UAAAuD,OAIlBvC,EA1HA,CA2HE8D,EAAA,GAEF9C,IAAgBlB,EAAG,uCAEnBkB,IAAgBlB,EAAG,gBACnBkD,KAAA,CACAC,UAAA,GACAC,SAAA,GAEAX,KAAA,CACAvD,UAAA,EACAyD,SAAA,GAEAV,kBAAA,IAGAf,IAAgBlB,EAAG,OAAUD,GAE7BmB,IAAgBlB,EAAG,gIAEnBA,EAAGJ,UA6CF,GACc,IAAAqE,EAAA,mDClNTC,GAAe,CAACC,WAAW,GAAIC,SAAS,IAExCC,8MAEFnC,MAAQgC,KAQRI,iBAAmB,SAACC,GAAuB,IAAbC,EAAahE,UAAAC,OAAA,QAAAgE,IAAAjE,UAAA,GAAAA,UAAA,GAAN,GAC1B2D,EAAc/D,EAAKlC,MAAMwG,YAAzBP,WACP,OACIhF,EAAAC,EAAAC,cAACsF,EAAA,EAAD,CAAQhF,GAAG,KAAKiF,MAAI,EAACC,UAAU,UAC3B1F,EAAAC,EAAAC,cAACsF,EAAA,EAAOG,QAAR,KAAiBP,EAAjB,WAAmCC,EAAnC,wBAA+DL,OAI3EY,iBAAmB,WACf,OACI5F,EAAAC,EAAAC,cAAAF,EAAAC,EAAA4F,SAAA,KACK5E,EAAKkE,iBAAiB,SAAU,+BACjCnF,EAAAC,EAAAC,cAAC4F,GAAA7F,EAAD,CACIf,UAAW,kBACX6G,KAAM9E,EAAK+E,yBACXC,OAAQ,CACJC,OAAQ,IACRC,UAAW,UACXC,MAAO,CACHC,MAAO,CAAC,EAAG,GACXC,UAAU,GAEdC,MAAO,CACHC,UAAU,EACVF,UAAU,UAOlCN,uBAAyB,WACrB,GAAI/E,EAAKlC,MAAMwG,YAAYkB,YAAYC,MAAMpF,OAAS,EAAE,MAAO,oCAC/D,IAAMqF,EAAS,CACX,OAAQ,QAAS,OAAQ,SAAU,SACnC,QAAS,OAAQ,SAAU,MAAO,YAAa,SAAU,SACzD,SAAU,QAAS,WAAY,YAAa,OAAQ,YAElDC,EAAa,GACb3B,EAAW4B,KAAEC,QAAQ7F,EAAKlC,MAAMwG,YAAYkB,YAAYC,MAAO,cAsBrE,OArBAnH,OAAOwH,KAAK9B,GAAU+B,QAAQ,SAACtE,GAC3B,IAAMuE,EAAQ,CACVC,EAAGL,KAAEM,IAAIlC,EAASvC,GAAM,OACxB0E,KAAMnG,EAAK8B,MAAMkC,SAASvC,GAC1B2E,KAAM,SACNC,QAAS,GACTC,SAAU,CACNC,SAAS,GAEbC,IAAK,CACDD,SAAS,GAEbE,WAAW,EACXC,KAAM,CACFC,MAAO,SAEXC,YAAY,EACZC,UAAWnB,EAAOjE,IAEtBkE,EAAWmB,KAAKd,KAEbL,KAWXoB,qBAAuB,WACnB,IAAMZ,EAAOP,KAAEM,IAAIlG,EAAKlC,MAAMwG,YAAYkB,YAAYC,MAAO,SAACuB,GACtD,iBAAAnG,OAAkBmG,EAAKC,WAAvB,iBAAApG,OAAiDb,EAAK8B,MAAMkC,SAASgD,EAAKC,eAsBlF,MAAO,CApBO,CACVC,EAAGtB,KAAEM,IAAIlG,EAAKlC,MAAMwG,YAAYkB,YAAYC,MAAO,UACnDQ,EAAGL,KAAEM,IAAIlG,EAAKlC,MAAMwG,YAAYkB,YAAYC,MAAO,UACnD0B,KAAMhB,EACNiB,WAAYxB,KAAEM,IAAIlG,EAAKlC,MAAMwG,YAAYkB,YAAYC,MAAO,OAC5D4B,KAAM,UACNjB,KAAM,YACNkB,OAAQ,CACJX,MAAOf,KAAEM,IAAIlG,EAAKlC,MAAMwG,YAAYkB,YAAYC,MAAO,OACvD8B,SAAU,CACNC,MAAO,MACPC,cAAe,WACfC,QAAS,WACTC,IAAK,GACLC,UAAW,MAGnBC,cAAe,6DACfxB,QAAS,QAIjByB,eAAiB,WACb,OAAI9H,EAAK8B,MAAMiG,UAAYnC,KAAEoC,QAAQhI,EAAKlC,MAAMwG,YAAYkB,aAAqByC,KAC7EjI,EAAKlC,MAAMwG,YAAYkB,YAAYC,MAAMpF,OAAS,EAAS,oCAE3DtB,EAAAC,EAAAC,cAAAF,EAAAC,EAAA4F,SAAA,KACK5E,EAAKkE,iBAAiB,WACvBnF,EAAAC,EAAAC,cAAC4F,GAAA7F,EAAD,CACIf,UAAW,kBACX6G,KAAM9E,EAAK+G,uBACX/B,OAAQ,CACJC,OAAQ,IACRC,UAAW,UACXC,MAAO,CACHqC,MAAO,OACPU,UAAU,EACV7C,UAAU,GAEdC,MAAO,CACHkC,MAAO,OACPU,UAAU,EACV7C,UAAU,UAOlCzD,MAAQ,CACJ,CACIuG,SAAU,UACVC,OAAQ,kBAAMrJ,EAAAC,EAAAC,cAAC4E,EAAIwE,KAAL,CAAUvJ,UAAU,GAAQkB,EAAK8H,oBAEnD,CACIK,SAAU,SACVC,OAAQ,kBAAMrJ,EAAAC,EAAAC,cAAC4E,EAAIwE,KAAL,CAAUvJ,UAAU,GAAQkB,EAAK2E,4GA1IjC2D,EAAWC,EAAWC,GACxC,QAAG5C,KAAEoC,QAAQ9H,KAAKpC,MAAMwG,YAAYkB,cAC5B+C,EAAUxE,aAAe7D,KAAK4B,MAAMiC,uDAoExC6B,KAAEoC,QAAQ9H,KAAK4B,MAAMkC,WACrB9D,KAAKuI,SAAS,CACVzE,SACI4B,KAAE8C,UAAU9C,KAAE+C,MAAM/C,KAAEgD,OAAO1I,KAAKpC,MAAM+K,YAAa,cAAe,iDAoE3E,IACE9E,EAAc7D,KAAKpC,MAAMwG,YAAzBP,WAMP,OALIA,IAAe7D,KAAK4B,MAAMiC,YAC1B7D,KAAKuI,SAAS,CACV1E,WAAYA,IAGhB6B,KAAEoC,QAAQ9H,KAAKpC,MAAMwG,YAAYkB,aAAqB,KAEtDzG,EAAAC,EAAAC,cAAAF,EAAAC,EAAA4F,SAAA,KACI7F,EAAAC,EAAAC,cAACmE,EAAA,EAAK0F,IAAN,CAAUC,UAAQ,GACdhK,EAAAC,EAAAC,cAACmE,EAAA,EAAK4F,OAAN,KACIjK,EAAAC,EAAAC,cAAC4E,EAAD,CAAKxB,KAAM,CAAE4G,WAAW,EAAMC,UAAU,GAAQtH,MAAO1B,KAAK0B,kBA7JnDuH,aAqKlBlF","file":"static/js/4.19384e2b.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\nimport Segment from '../../elements/Segment/Segment';\n/**\n * A tab pane holds the content of a tab.\n */\n\nfunction TabPane(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      loading = props.loading;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(loading, 'loading'), 'tab', className);\n  var rest = getUnhandledProps(TabPane, props);\n  var ElementType = getElementType(TabPane, props);\n  var calculatedDefaultProps = {};\n\n  if (ElementType === Segment) {\n    calculatedDefaultProps.attached = 'bottom';\n  }\n\n  return React.createElement(ElementType, _extends({}, calculatedDefaultProps, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nTabPane.handledProps = [\"active\", \"as\", \"children\", \"className\", \"content\", \"loading\"];\nTabPane.defaultProps = {\n  as: Segment,\n  active: true\n};\nTabPane.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A tab pane can be active. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A Tab.Pane can display a loading indicator. */\n  loading: PropTypes.bool\n} : {};\nTabPane.create = createShorthandFactory(TabPane, function (content) {\n  return {\n    content: content\n  };\n});\nexport default TabPane;","import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _map from \"lodash/map\";\nimport _get from \"lodash/get\";\nimport _invoke from \"lodash/invoke\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { AutoControlledComponent as Component, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\nimport Grid from '../../collections/Grid/Grid';\nimport GridColumn from '../../collections/Grid/GridColumn';\nimport Menu from '../../collections/Menu/Menu';\nimport TabPane from './TabPane';\n/**\n * A Tab is a hidden section of content activated by a Menu.\n * @see Menu\n * @see Segment\n */\n\nvar Tab =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Tab, _Component);\n\n  function Tab() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Tab);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tab)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleItemClick\", function (e, _ref) {\n      var index = _ref.index;\n\n      _invoke(_this.props, 'onTabChange', e, _objectSpread({}, _this.props, {\n        activeIndex: index\n      }));\n\n      _this.trySetState({\n        activeIndex: index\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Tab, [{\n    key: \"getInitialAutoControlledState\",\n    value: function getInitialAutoControlledState() {\n      return {\n        activeIndex: 0\n      };\n    }\n  }, {\n    key: \"renderItems\",\n    value: function renderItems() {\n      var _this$props = this.props,\n          panes = _this$props.panes,\n          renderActiveOnly = _this$props.renderActiveOnly;\n      var activeIndex = this.state.activeIndex;\n      if (renderActiveOnly) return _invoke(_get(panes, \"[\".concat(activeIndex, \"]\")), 'render', this.props);\n      return _map(panes, function (_ref2, index) {\n        var pane = _ref2.pane;\n        return TabPane.create(pane, {\n          overrideProps: {\n            active: index === activeIndex\n          }\n        });\n      });\n    }\n  }, {\n    key: \"renderMenu\",\n    value: function renderMenu() {\n      var _this$props2 = this.props,\n          menu = _this$props2.menu,\n          panes = _this$props2.panes,\n          menuPosition = _this$props2.menuPosition;\n      var activeIndex = this.state.activeIndex;\n\n      if (menu.tabular === true && menuPosition === 'right') {\n        menu.tabular = 'right';\n      }\n\n      return Menu.create(menu, {\n        autoGenerateKey: false,\n        overrideProps: {\n          items: _map(panes, 'menuItem'),\n          onItemClick: this.handleItemClick,\n          activeIndex: activeIndex\n        }\n      });\n    }\n  }, {\n    key: \"renderVertical\",\n    value: function renderVertical(menu) {\n      var _this$props3 = this.props,\n          grid = _this$props3.grid,\n          menuPosition = _this$props3.menuPosition;\n\n      var paneWidth = grid.paneWidth,\n          tabWidth = grid.tabWidth,\n          gridProps = _objectWithoutProperties(grid, [\"paneWidth\", \"tabWidth\"]);\n\n      var position = menuPosition || menu.props.tabular === 'right' && 'right' || 'left';\n      return React.createElement(Grid, gridProps, position === 'left' && GridColumn.create({\n        width: tabWidth,\n        children: menu\n      }, {\n        autoGenerateKey: false\n      }), GridColumn.create({\n        width: paneWidth,\n        children: this.renderItems(),\n        stretched: true\n      }, {\n        autoGenerateKey: false\n      }), position === 'right' && GridColumn.create({\n        width: tabWidth,\n        children: menu\n      }, {\n        autoGenerateKey: false\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var menu = this.renderMenu();\n      var rest = getUnhandledProps(Tab, this.props);\n      var ElementType = getElementType(Tab, this.props);\n\n      if (menu.props.vertical) {\n        return React.createElement(ElementType, rest, this.renderVertical(menu));\n      }\n\n      return React.createElement(ElementType, rest, menu.props.attached !== 'bottom' && menu, this.renderItems(), menu.props.attached === 'bottom' && menu);\n    }\n  }]);\n\n  return Tab;\n}(Component);\n\n_defineProperty(Tab, \"autoControlledProps\", ['activeIndex']);\n\n_defineProperty(Tab, \"defaultProps\", {\n  grid: {\n    paneWidth: 12,\n    tabWidth: 4\n  },\n  menu: {\n    attached: true,\n    tabular: true\n  },\n  renderActiveOnly: true\n});\n\n_defineProperty(Tab, \"Pane\", TabPane);\n\n_defineProperty(Tab, \"handledProps\", [\"activeIndex\", \"as\", \"defaultActiveIndex\", \"grid\", \"menu\", \"menuPosition\", \"onTabChange\", \"panes\", \"renderActiveOnly\"]);\n\nTab.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** The initial activeIndex. */\n  defaultActiveIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /** Index of the currently active tab. */\n  activeIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Shorthand props for the Menu.\n   * tabular, if true, will derive final value from `menuPosition`, otherwise set 'left' or 'right' explicitly.\n   */\n  menu: PropTypes.object,\n\n  /** Align vertical menu */\n  menuPosition: PropTypes.oneOf(['left', 'right']),\n\n  /** Shorthand props for the Grid. */\n  grid: PropTypes.object,\n\n  /**\n   * Called on tab change.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props and proposed new activeIndex.\n   * @param {object} data.activeIndex - The new proposed activeIndex.\n   */\n  onTabChange: PropTypes.func,\n\n  /**\n   * Array of objects describing each Menu.Item and Tab.Pane:\n   * { menuItem: 'Home', render: () => <Tab.Pane /> }\n   * or\n   * { menuItem: 'Home', pane: 'Welcome' }\n   */\n  panes: PropTypes.arrayOf(PropTypes.shape({\n    menuItem: customPropTypes.itemShorthand,\n    pane: customPropTypes.itemShorthand,\n    render: PropTypes.func\n  })),\n\n  /** A Tab can render only active pane. */\n  renderActiveOnly: PropTypes.bool\n} : {};\nexport default Tab;","import React, {Component} from 'react'\nimport {Dimmer, Form, Grid, Header, Image, Loader, Search, Segment, Tab} from 'semantic-ui-react'\nimport _ from 'lodash'\nimport Plot from \"react-plotly.js\";\nimport PageLoader from \"../../../hooks/pageLoader\";\n\nconst initialState = {activeGene:'', clusters:{}}\n\nclass GeneExpressionForm extends Component {\n\n    state = initialState;\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        if(_.isEmpty(this.props.modulesData.cellsByGene)) return true\n        return (nextState.activeGene !== this.state.activeGene)\n    }\n\n\n    renderPlotHeader = (plotType, extra ='') =>{\n        const {activeGene} = this.props.modulesData\n        return (\n            <Header as='h4' icon textAlign='center'>\n                <Header.Content>{plotType} plot - {extra} expression of gene: {activeGene}</Header.Content>\n            </Header>\n        )\n    }\n    renderViolinPlot = () => {\n        return (\n            <>\n                {this.renderPlotHeader('Violin', 'Top 500 cells per cluster: ')}\n                <Plot\n                    className={'full-size large'}\n                    data={this.createViolinDataPoints()}\n                    layout={{\n                        height: 600,\n                        hovermode: 'closest',\n                        yaxis: {\n                            range: [0, 6],\n                            zeroline: false,\n                        },\n                        xaxis: {\n                            showline: true,\n                            zeroline: true,\n                        }\n                    }}\n                />\n            </>\n        )\n    }\n    createViolinDataPoints = () => {\n        if (this.props.modulesData.cellsByGene.cells.length < 1)return \"No data registered for this gene.\";\n        const colors = [\n            'grey', 'green', 'blue', 'yellow', 'purple',\n            'brown', 'pink', 'orange', 'red', 'dark grey', 'violet', 'salmon',\n            'tomato', 'khaki', 'lavender', 'slateblue', 'lime', 'darkcyan'\n        ]\n        const plotTraces = [];\n        const clusters = _.groupBy(this.props.modulesData.cellsByGene.cells, 'cluster_id')\n        Object.keys(clusters).forEach((key) => {\n            const trace = {\n                y: _.map(clusters[key], 'CPM'),\n                name: this.state.clusters[key],\n                type: 'violin',\n                opacity: 0.5,\n                meanline: {\n                    visible: true\n                },\n                box: {\n                    visible: true\n                },\n                boxpoints: true,\n                line: {\n                    color: 'black'\n                },\n                showlegend: false,\n                fillcolor: colors[key]\n            };\n            plotTraces.push(trace)\n        });\n        return plotTraces\n    }\n    componentDidMount() {\n        if (_.isEmpty(this.state.clusters)){\n            this.setState({\n                clusters:\n                    _.mapValues(_.keyBy(_.values(this.props.collection), 'cluster_id'), 'annotation')\n            })\n        }\n    }\n\n    createGeneDataPoints = () => {\n        const name = _.map(this.props.modulesData.cellsByGene.cells, (item) => {\n                return `Cluster ${item.cluster_id}, Cell type: ${this.state.clusters[item.cluster_id]}`\n        });\n        const trace = {\n            x: _.map(this.props.modulesData.cellsByGene.cells, 'tsne_1'),\n            y: _.map(this.props.modulesData.cellsByGene.cells, 'tsne_2'),\n            text: name,\n            customdata: _.map(this.props.modulesData.cellsByGene.cells, 'CPM'),\n            mode: 'markers',\n            type: 'scattergl',\n            marker: {\n                color: _.map(this.props.modulesData.cellsByGene.cells, 'CPM'),\n                colorbar: {\n                    title: \"CPM\",\n                    thicknessmode: \"fraction\",\n                    lenmode: \"fraction\",\n                    len: 0.5,\n                    thickness: 0.01\n                }\n            },\n            hovertemplate: \"<b>%{text}</b><br><br> CPM:  %{customdata} <extra></extra>\",\n            opacity: 0.5,\n        }\n        return [trace]\n    }\n    renderGenePlot = () => {\n        if (this.state.selected && _.isEmpty(this.props.modulesData.cellsByGene)) return PageLoader\n        if (this.props.modulesData.cellsByGene.cells.length < 1)return \"No data registered for this gene.\";\n        return (\n            <>\n                {this.renderPlotHeader('Cluster')}\n                <Plot\n                    className={'full-size large'}\n                    data={this.createGeneDataPoints()}\n                    layout={{\n                        height: 600,\n                        hovermode: 'closest',\n                        yaxis: {\n                            title: \"test\",\n                            showgrid: false,\n                            zeroline: false,\n                        },\n                        xaxis: {\n                            title: \"test\",\n                            showgrid: false,\n                            zeroline: false,\n                        }\n                    }}\n                />\n            </>\n        )\n    }\n    panes = [\n        {\n            menuItem: 'Cluster',\n            render: () => <Tab.Pane attached={false}>{this.renderGenePlot()}</Tab.Pane>,\n        },\n        {\n            menuItem: 'Violin',\n            render: () => <Tab.Pane attached={false}>{this.renderViolinPlot()}</Tab.Pane>,\n        },\n    ]\n    render() {\n        const {activeGene} = this.props.modulesData\n        if (activeGene !== this.state.activeGene){\n            this.setState({\n                activeGene: activeGene\n            })\n        }\n        if (_.isEmpty(this.props.modulesData.cellsByGene)) return null;\n        return (\n            <>\n                <Grid.Row centered>\n                    <Grid.Column>\n                        <Tab menu={{ secondary: true, pointing: true }} panes={this.panes} />\n                    </Grid.Column>\n                </Grid.Row>\n            </>\n        )\n    }\n}\n\nexport default GeneExpressionForm\n"],"sourceRoot":""}