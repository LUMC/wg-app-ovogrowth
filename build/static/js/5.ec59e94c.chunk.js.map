{"version":3,"sources":["components/modules/ClusterViewer/items/GeneralCluster.js"],"names":["initialState","dataReady","clusters","dataset","GeneralCluser","state","createDataPoints","plotTraces","_","groupBy","_this","props","modulesData","cells","annotation","Object","keys","forEach","key","name","description","trace","x","map","y","mode","type","text","hovertemplate","concat","opacity","push","renderGenePlot","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Fragment","react_plotly_js__WEBPACK_IMPORTED_MODULE_8___default","className","data","layout","height","hovermode","yaxis","title","showgrid","zeroline","xaxis","nextProps","nextState","nextContext","this","ds","isEmpty","setState","mapValues","keyBy","values","collection","length","_hooks_pageLoader__WEBPACK_IMPORTED_MODULE_10__","frame","semantic_ui_react__WEBPACK_IMPORTED_MODULE_6__","Row","Column","width","semantic_ui_react__WEBPACK_IMPORTED_MODULE_7__","Component"],"mappings":"2NAMMA,EAAe,CAACC,WAAW,EAAOC,SAAU,GAAIC,QAAS,IAEzDC,6MAEFC,MAAQL,IAORM,iBAAmB,WACf,IAAMC,EAAa,GACbL,EAAWM,IAAEC,QAAQC,EAAKC,MAAMC,YAAYC,MAAO,cACnDC,EAAaJ,EAAKC,MAAMG,WAe9B,OAdAC,OAAOC,KAAKd,GAAUe,QAAQ,SAACC,GAC3B,IAAMC,EAAOL,EAAWI,GAAKE,YACvBC,EAAQ,CACVC,EAAGd,IAAEe,IAAIrB,EAASgB,GAAM,UACxBM,EAAGhB,IAAEe,IAAIrB,EAASgB,GAAM,UACxBO,KAAM,UACNC,KAAM,YACNP,KAAMA,EACNQ,KAAMnB,IAAEe,IAAIrB,EAASgB,GAAM,cAC3BU,cAAa,kCAAAC,OAAoCV,EAApC,wBACbW,QAAS,IAEbvB,EAAWwB,KAAKV,KAEbd,KAEXyB,eAAiB,WACb,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACII,UAAW,kBACXC,KAAM7B,EAAKJ,mBACXkC,OAAQ,CACJC,OAAQ,IACRC,UAAW,UACXC,MAAO,CACHC,MAAO,SACPC,UAAU,EACVC,UAAU,GAEdC,MAAO,CACHH,MAAO,SACPC,UAAU,EACVC,UAAU,6FA1CZE,EAAWC,EAAWC,GACxC,OAAGC,KAAK9C,MAAM+C,KAAOD,KAAKxC,MAAMR,UACvBgD,KAAK9C,MAAMJ,WAAagD,EAAUhD,2CAuD3C,OAPIO,IAAE6C,QAAQF,KAAK9C,MAAMH,WAAaiD,KAAK9C,MAAM+C,KAAOD,KAAKxC,MAAMR,WAC/DgD,KAAKG,SAAS,CACVpD,SACIM,IAAE+C,UAAU/C,IAAEgD,MAAMhD,IAAEiD,OAAON,KAAKxC,MAAM+C,YAAa,cAAe,gBAE5EP,KAAKG,SAAS,CAACF,GAAID,KAAKxC,MAAMR,WAE9BgD,KAAKxC,MAAMC,YAAYC,MAAM8C,OAAS,EAAU1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAYC,OAAO,KAClEV,KAAK9C,MAAMJ,WAAWkD,KAAKG,SAAS,CAACrD,WAAW,IAEjDgC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAC2B,EAAA,EAAKC,IAAN,KACI9B,EAAAC,EAAAC,cAAC2B,EAAA,EAAKE,OAAN,CAAaC,MAAO,IAChBhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACKf,KAAKnB,6BApENmC,aA6Eb/D","file":"static/js/5.ec59e94c.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport {Grid, Segment,} from 'semantic-ui-react'\nimport Plot from 'react-plotly.js';\nimport _ from 'lodash'\nimport PageLoader from \"../../../hooks/pageLoader\";\n\nconst initialState = {dataReady: false, clusters: {}, dataset: ''}\n\nclass GeneralCluser extends Component {\n\n    state = initialState;\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        if(this.state.ds !== this.props.dataset) return true;\n        return (!this.state.dataReady && nextState.dataReady)\n    }\n\n    createDataPoints = () => {\n        const plotTraces = [];\n        const clusters = _.groupBy(this.props.modulesData.cells, 'cluster_id')\n        const annotation = this.props.annotation\n        Object.keys(clusters).forEach((key) => {\n            const name = annotation[key].description\n            const trace = {\n                x: _.map(clusters[key], 'tsne_1'),\n                y: _.map(clusters[key], 'tsne_2'),\n                mode: 'markers',\n                type: 'scattergl',\n                name: name,\n                text: _.map(clusters[key], 'cluster_id'),\n                hovertemplate: `<b>Cluster %{text}, Cell type: ${name}</b> <extra></extra>`,\n                opacity: 0.5,\n            };\n            plotTraces.push(trace)\n        });\n        return plotTraces\n    }\n    renderGenePlot = () => {\n        return (\n            <>\n                <Plot\n                    className={'full-size large'}\n                    data={this.createDataPoints()}\n                    layout={{\n                        height: 600,\n                        hovermode: 'closest',\n                        yaxis: {\n                            title: \"tSNE_2\",\n                            showgrid: false,\n                            zeroline: false,\n                        },\n                        xaxis: {\n                            title: \"tSNE_1\",\n                            showgrid: false,\n                            zeroline: false,\n                        }\n                    }}\n                />\n            </>\n        )\n    }\n    render() {\n        if (_.isEmpty(this.state.clusters) || this.state.ds !== this.props.dataset){\n            this.setState({\n                clusters:\n                    _.mapValues(_.keyBy(_.values(this.props.collection), 'cluster_id'), 'annotation')\n            })\n            this.setState({ds: this.props.dataset})\n        }\n        if (this.props.modulesData.cells.length < 1) return <PageLoader frame={true} />\n        if (!this.state.dataReady) this.setState({dataReady: true})\n        return (\n            <>\n                <Grid.Row>\n                    <Grid.Column width={16}>\n                        <Segment>\n                            {this.renderGenePlot()}\n                        </Segment>\n                    </Grid.Column>\n                </Grid.Row>\n            </>\n        )\n    }\n}\n\nexport default GeneralCluser\n"],"sourceRoot":""}